---
import ImageWrapper from "../components/misc/ImageWrapper.astro";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import MainGridLayout from "../layouts/MainGridLayout.astro";

// --- Bangumi API 配置 ---
const uid = "ferxal987";
const token = 'xQdjiPq4RSSym22QI92MVECwBHSFm5VV4Vpr9kdA';
const base = 'https://api.bgm.tv/v0';

// --- 类型定义 ---
type Cat = 'watching' | 'wish' | 'collect';
type CatNum = 3 | 1 | 2;

interface Image {
  large?: string;
  common?: string;
  medium?: string;
  small?: string;
  grid?: string;
}

interface Subject {
  id: number;
  type: number;
  name: string;
  name_cn: string;
  eps?: number;
  images?: Image;
}

interface CollectionItem {
  subject_id: number;
  subject: Subject;
  ep_status: number;
  type: CatNum;
}

interface CollectionResponse {
  data: CollectionItem[];
  limit: number;
  offset: number;
  total: number;
}

const cats = [
  { key: 'watching', name: '在看', type: 3 },
  { key: 'wish',     name: '想看', type: 1 },
  { key: 'collect',  name: '看完', type: 2 },
];

// --- 数据获取 ---
async function fetchOnce(type: CatNum): Promise<CollectionItem[]> {
  try {
    const res = await fetch(
      `${base}/users/${uid}/collections?subject_type=2&type=${type}&limit=50`,
      { headers: { Authorization: `Bearer ${token}` } }
    );

    if (!res.ok) {
      console.error(`API Error (${type}):`, res.status, await res.text());
      return [];
    }

    const json: CollectionResponse = await res.json();
    return Array.isArray(json.data) ? json.data : [];
  } catch (err) {
    console.error('Fetch error:', err);
    return [];
  }
}

let allDataFetched = true;
const data: Record<Cat, CollectionItem[]> = { watching: [], wish: [], collect: [] };

try {
  const results = await Promise.all(cats.map(({ type }) => fetchOnce(type)));
  cats.forEach(({ key }, i) => { data[key] = results[i]; });
} catch (err) {
  console.error("Fetch failed:", err);
  allDataFetched = false;
}

// 获取状态的翻译文本
function getStatusText(status: string): string {
	switch (status) {
		case "watching":
			return i18n(I18nKey.animeStatusWatching);
		case "completed":
			return i18n(I18nKey.animeStatusCompleted);
		default:
			return status;
	}
}

// 图片处理函数 - 转换为webp并调整尺寸
function processImageUrl(url: string): string {
  if (!url || url.includes('/default-image.png')) return url;
  
  // 使用图片CDN服务转换为WebP格式并调整尺寸
  return `https://images.weserv.nl/?url=${encodeURIComponent(url)}&w=300&h=400&output=webp`;
}
---

<MainGridLayout title={i18n(I18nKey.anime)} description="我的追番记录">
	<div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-32">
		<div class="card-base z-10 px-9 py-6 relative w-full">
			<div class="relative">
				<div class="flex flex-row items-center text-lg font-bold mb-6 text-90">
					<div class="flex flex-row items-center">
						<svg class="w-6 h-6 mr-2 text-90" fill="currentColor" viewBox="0 0 24 24">
							<path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
						</svg>
						<span>{i18n(I18nKey.anime)}</span>
				</div>
			</div>

				<!-- 统计信息 -->
				<div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
					<div class="card-base p-4 text-center">
						<div class="text-2xl font-bold text-[var(--primary)]">{data.watching.length + data.wish.length + data.collect.length}</div>
						<div class="text-sm text-75">{i18n(I18nKey.animeTotal)}</div>
					</div>
					<div class="card-base p-4 text-center">
						<div class="text-2xl font-bold text-[oklch(0.65_0.15_140)] dark:text-[oklch(0.75_0.15_140)]">{data.watching.length}</div>
						<div class="text-sm text-75">{i18n(I18nKey.animeWatching)}</div>
					</div>
					<div class="card-base p-4 text-center">
						<div class="text-2xl font-bold text-[oklch(0.65_0.15_240)] dark:text-[oklch(0.75_0.15_240)]">{data.collect.length}</div>
						<div class="text-sm text-75">{i18n(I18nKey.animeCompleted)}</div>
					</div>
				</div>

				{allDataFetched ? (
						<!-- 重新设计的状态选项栏 -->
						<div class="flex flex-wrap gap-2 mb-6" role="tablist" id="bangumi-tabs">
							{cats.map(({ key, name }, i) => (
								<button
									id={`tab-${key}`}
									class={`px-4 py-2 rounded-lg font-medium text-sm transition-all duration-300 ${
										i === 0
											? 'bg-[var(--primary)] text-white shadow-lg'
											: 'bg-[var(--card-bg)] text-[var(--text-secondary)] hover:bg-[var(--btn-plain-bg-hover)]'
									}`}
									data-target={key}
									role="tab"
									aria-selected={i === 0}
								>
									{name}({data[key].length})
								</button>
							))}
						</div>

						<!-- 内容区 -->
						<div class="mt-4 bangumi-content-container">
							{cats.map(({ key, name }, i) => (
								<section
									id={key}
									role="tabpanel"
									class={`bangumi-section ${i !== 0 ? 'hidden' : ''}`}
									aria-hidden={i !== 0}
								>
									{data[key].length ? (
										<div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
											{data[key].map(item => {
												const s = item.subject;
												const total = s.eps || 0;
												const watched = item.ep_status || 0;
												const percent = total ? Math.min(100, Math.round((watched / total) * 100)) : 0;
												const img = processImageUrl(s.images?.large || s.images?.common || '/default-image.png');

												return (
													<div class="card-base overflow-hidden hover:shadow-lg transition-transform hover:scale-[1.02] dark:bg-[var(--card-bg)] animate-fade-in">
														<div class="aspect-[3/4] overflow-hidden rounded-lg">
															<a href={`https://bgm.tv/subject/${s.id}`} target="_blank" rel="noopener noreferrer" class="block w-full h-full hover:opacity-80 transition-opacity cursor-pointer">
																<ImageWrapper 
																	src={img}
																	alt={s.name_cn || s.name || '未知'}
																	class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
																	data-src-fallback="/default-image.png"
																	id={`anime-img-${s.id}`}
																/>
															</a>
														</div>
														<div class="p-3">
															<h2 class="font-medium text-sm line-clamp-2 mb-2 min-h-[2.5rem] text-90 dark:text-white">
																{s.name_cn || s.name}
															</h2>
													<div class="text-xs">
														<div class="flex justify-between mb-1">
																	<span class="text-50 dark:text-gray-300">{watched}/{total}</span>
												<span class="text-50 dark:text-gray-300">{percent}%</span>
																</div>
																<div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5">
																	<div
																		class="h-1.5 rounded-full transition-all duration-300"
																		style={`width: ${percent}%; background-color: var(--primary)`}
																	></div>
													</div>
														</div>
													</div>
												</div>
											);
										})}
									</div>
								) : (
									<div class="text-center py-12 text-50 dark:text-gray-400">
										暂无 {name} 的记录
									</div>
								)}
							</section>
						))}
					</div>
				</>
			) : (
				<div class="text-center py-12 text-red-500 dark:text-red-400">
					数据加载失败，请检查网络或稍后重试。
				</div>
			)}
		</div>
	</div>
</div>
</MainGridLayout>

<!-- 客户端交互 -->
<script is:inline>
  // 添加页面状态变量
  let isInitialized = false;
  
  function initBangumiTabs() {
    // 防止重复初始化
    if (isInitialized) return;
    isInitialized = true;
    
    // 暴露到全局以便Swup事件调用
    window.initBangumiTabs = initBangumiTabs;
    
    const tabs = document.querySelectorAll('#bangumi-tabs button');
    const sections = document.querySelectorAll('.bangumi-section');

    function switchTab(tab) {
      // 移除所有过渡动画以提升性能
      document.querySelectorAll('.bangumi-section').forEach(sec => {
        sec.style.transition = 'none';
        sec.classList.add('hidden');
        sec.setAttribute('aria-hidden', 'true');
        // 移除绝对定位以避免布局问题
        sec.style.position = '';
      });
      
      tabs.forEach(t => {
        const selected = t === tab;
        // 更新按钮样式
        if (selected) {
          t.classList.add('bg-[var(--primary)]', 'text-white', 'shadow-lg');
          t.classList.remove('bg-[var(--card-bg)]', 'text-[var(--text-secondary)]');
        } else {
          t.classList.remove('bg-[var(--primary)]', 'text-white', 'shadow-lg');
          t.classList.add('bg-[var(--card-bg)]', 'text-[var(--text-secondary)]');
        }
        t.setAttribute('aria-selected', selected);
      });

      // 使用requestAnimationFrame确保动画流畅执行
      requestAnimationFrame(() => {
        const targetSection = document.getElementById(tab.dataset.target);
        if (targetSection) {
          targetSection.style.transition = 'opacity 0.3s ease-in-out, transform 0.3s ease-in-out';
          targetSection.classList.remove('hidden');
          targetSection.setAttribute('aria-hidden', 'false');
          // 恢复正确的高度和溢出设置
          targetSection.style.height = '';
          targetSection.style.overflow = '';
          // 确保激活的标签页有正确的定位
          targetSection.style.position = '';
        }
      });
    }

    // 使用事件委托模式，避免重复绑定问题
    document.getElementById('bangumi-tabs').addEventListener('click', (event) => {
      const button = event.target.closest('button');
      if (button) {
        switchTab(button);
      }
    });
    
    // 立即初始化标签页状态，确保页面加载时按钮可点击
    if (tabs.length > 0) {
      switchTab(tabs[0]);
    }

    // 图片加载完成处理
    document.querySelectorAll('.bangumi-img').forEach(img => {
      if (img.complete) {
        img.classList.add('loaded');
      } else {
        img.addEventListener('load', function() {
          this.classList.add('loaded');
        });
      }
    });

    // 图片错误处理
    document.querySelectorAll('img[data-src-fallback]').forEach(img => {
      img.addEventListener('error', function () {
        if (this.src !== this.dataset.srcFallback) {
          this.src = this.dataset.srcFallback;
          this.alt = '图片加载失败';
        }
      });
    });
  }
  
  // 页面加载完成后初始化标签页（使用一次性监听）
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initBangumiTabs, { once: true });
  } else {
    // 如果页面已经加载完成，直接初始化
    initBangumiTabs();
  }
  
  // 监听Astro的页面导航事件（视图过渡）
  document.addEventListener('astro:after-swap', () => {
    // 重置初始化状态以允许重新初始化
    isInitialized = false;
    // 移除旧的事件监听器，防止重复绑定
    const tabsContainer = document.getElementById('bangumi-tabs');
    if (tabsContainer) {
      const newTabsContainer = tabsContainer.cloneNode(true);
      tabsContainer.replaceWith(newTabsContainer);
    }
    // 添加延迟确保DOM完全更新后再初始化，与Swup的300ms延迟保持一致
    setTimeout(initBangumiTabs, 350);
  });
</script>

<style>
	.card-base {
		background: var(--card-bg);
		border: 1px solid var(--line-divider);
	}
	
	.line-clamp-2 {
		display: -webkit-box;
		-webkit-line-clamp: 2;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}
	
	.animate-fade-in {
		animation: fadeIn 0.5s ease-in-out;
	}
	
	@keyframes fadeIn {
		from { opacity: 0; transform: translateY(10px); }
		to { opacity: 1; transform: translateY(0); }
	}

	/* 页面切换动画优化 */
	.bangumi-section {
		transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
	}
	
	.bangumi-section:not(.hidden) {
		opacity: 1;
		transform: translateY(0);
	}
	
	.bangumi-section.hidden {
		opacity: 0;
		transform: translateY(10px);
		height: 0;
		overflow: hidden;
	}
	
	.bangumi-content-container {
		min-height: 300px;
	}

	/* 图片加载动画优化 */
	.image-loading {
		position: relative;
		overflow: hidden;
		background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
		background-size: 200% 100%;
		animation: loadingShimmer 1.5s infinite;
		border-radius: 0.5rem;
	}

	@keyframes loadingShimmer {
		0% { background-position: -200% 0; }
		100% { background-position: 200% 0; }
	}

	/* 图片渐显效果 */
	.bangumi-img {
		transition: opacity 0.5s ease-in-out, transform 0.3s ease-in-out;
		opacity: 0;
		transform: scale(0.95);
	}

	.bangumi-img.loaded {
		opacity: 1;
		transform: scale(1);
	}

	/* 选项栏样式优化 */
	#bangumi-tabs button {
		position: relative;
		border: none;
		background: var(--card-bg);
		cursor: pointer;
		transition: all 0.3s ease;
		color: var(--text-secondary);
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
	}

	@media (prefers-color-scheme: dark) {
		#bangumi-tabs button {
			box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
		}
	}

	#bangumi-tabs button:hover {
		background-color: var(--btn-plain-bg-hover);
		transform: translateY(-2px);
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
	}

	#bangumi-tabs button[aria-selected="true"] {
		background: var(--primary);
		color: white;
		font-weight: 600;
		box-shadow: 0 4px 12px color-mix(in oklch, var(--primary), transparent 70%);
	}

	/* 进度条样式优化 */
	.progress-bar {
		transition: width 0.5s ease-in-out;
	}
</style>