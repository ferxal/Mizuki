---
import path from "node:path";

interface Props {
	id?: string;
	src: string;
	class?: string;
	alt?: string;
	position?: string;
	basePath?: string;
}

import { Image } from "astro:assets";
import { url } from "../../utils/url-utils";

const { id, src, alt, position = "center", basePath = "/" } = Astro.props;
const className = Astro.props.class;

const isLocal = !(
	src.startsWith("/") ||
	src.startsWith("http") ||
	src.startsWith("https") ||
	src.startsWith("data:")
);
const isPublic = src.startsWith("/");

// TODO temporary workaround for images dynamic import
// https://github.com/withastro/astro/issues/3373
// biome-ignore lint/suspicious/noImplicitAnyLet: <check later>
let img;
if (isLocal) {
	const files = import.meta.glob<ImageMetadata>("../../**", {
		import: "default",
	});
	let normalizedPath = path
		.normalize(path.join("../../", basePath, src))
		.replace(/\\/g, "/");
	const file = files[normalizedPath];
	if (!file) {
		console.error(
			`\n[ERROR] Image file not found: ${normalizedPath.replace("../../", "src/")}`,
		);
	}
	img = await file();
}

const imageClass = "w-full h-full object-cover";
const imageStyle = `object-position: ${position}`;
---
<div id={id} class:list={[className, 'overflow-hidden relative']}>
    <div class="transition absolute inset-0 dark:bg-black/10 bg-opacity-50 pointer-events-none"></div>
    {isLocal && img && <Image src={img} alt={alt || ""} class={imageClass} style={imageStyle} onload="if (this.parentElement) { const loadingEl = this.parentElement.querySelector('.image-loading'); if (loadingEl) loadingEl.style.display = 'none'; this.classList.add('loaded'); }" onerror="if (this.parentElement) { const loadingEl = this.parentElement.querySelector('.image-loading'); if (loadingEl) loadingEl.style.display = 'none'; }"/>}
    {!isLocal && <img src={isPublic ? url(src) : src} alt={alt || ""} class={imageClass} style={imageStyle} onload="if (this.parentElement) { const loadingEl = this.parentElement.querySelector('.image-loading'); if (loadingEl) loadingEl.style.display = 'none'; this.classList.add('loaded'); }" onerror="if (this.parentElement) { const loadingEl = this.parentElement.querySelector('.image-loading'); if (loadingEl) loadingEl.style.display = 'none'; }"/>}
    <div class="image-loading absolute inset-0 pointer-events-none" id={`loading-${id}`}></div>
</div>

<style>
    .image-loading {
        position: absolute;
        inset: 0;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
        background-size: 200% 100%;
        animation: loadingShimmer 1.5s infinite;
        pointer-events: none;
        transition: opacity 0.3s ease-in-out;
    }

    @keyframes loadingShimmer {
        0% { background-position: -200% 0; }
        100% { background-position: 200% 0; }
    }

    img.loaded {
        opacity: 1 !important;
        transform: scale(1) !important;
        transition: opacity 0.5s ease-in-out, transform 0.3s ease-in-out !important;
    }
</style>
