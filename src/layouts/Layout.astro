---
// 只加载最常用的字体权重，减少加载时间
import "@fontsource/roboto/400.css";
import "@fontsource/roboto/700.css";

import ConfigCarrier from "@components/ConfigCarrier.astro";
import MusicPlayer from "@components/widget/MusicPlayer.svelte";
import { profileConfig, siteConfig } from "@/config";
import {
	AUTO_MODE,
	BANNER_HEIGHT,
	BANNER_HEIGHT_EXTEND,
	BANNER_HEIGHT_HOME,
	DARK_MODE,
	DEFAULT_THEME,
	LIGHT_MODE,
	PAGE_WIDTH,
} from "../constants/constants";
import { defaultFavicons } from "../constants/icon";
import type { Favicon } from "../types/config";
import { pathsEqual, url } from "../utils/url-utils";
import "katex/dist/katex.css";

interface Props {
	title?: string;
	banner?: string;
	description?: string;
	lang?: string;
	setOGTypeArticle?: boolean;
}

let { title, banner, description, lang, setOGTypeArticle } = Astro.props;

// apply a class to the body element to decide the height of the banner, only used for initial page load
// Swup can update the body for each page visit, but it's after the page transition, causing a delay for banner height change
// so use Swup hooks instead to change the height immediately when a link is clicked
const isHomePage = pathsEqual(Astro.url.pathname, url("/"));

// defines global css variables
// why doing this in Layout instead of GlobalStyles: https://github.com/withastro/astro/issues/6728#issuecomment-1502203757
const configHue = siteConfig.themeColor.hue;

// 获取默认banner图片的辅助函数
const getDefaultBanner = (): string => {
	const src = siteConfig.banner.src;
	if (typeof src === "string") {
		return src;
	}
	if (Array.isArray(src)) {
		return src[0] || "";
	}
	if (src && typeof src === "object") {
		// 优先使用desktop，如果没有则使用mobile
		const desktopSrc = src.desktop;
		const mobileSrc = src.mobile;
		if (typeof desktopSrc === "string") {
			return desktopSrc;
		}
		if (Array.isArray(desktopSrc) && desktopSrc.length > 0) {
			return desktopSrc[0];
		}
		if (typeof mobileSrc === "string") {
			return mobileSrc;
		}
		if (Array.isArray(mobileSrc) && mobileSrc.length > 0) {
			return mobileSrc[0];
		}
	}
	return "";
};

if (!banner || typeof banner !== "string" || banner.trim() === "") {
	banner = getDefaultBanner();
}

// TODO don't use post cover as banner for now
banner = getDefaultBanner();

const enableBanner = siteConfig.banner.enable;

let pageTitle: string;
if (title) {
	pageTitle = `${title} - ${siteConfig.title}`;
} else {
	pageTitle = `${siteConfig.title} - ${siteConfig.subtitle}`;
}

const favicons: Favicon[] =
	siteConfig.favicon.length > 0 ? siteConfig.favicon : defaultFavicons;

// const siteLang = siteConfig.lang.replace('_', '-')
if (!lang) {
	lang = `${siteConfig.lang}`;
}
const siteLang = lang.replace("_", "-");

const bannerOffsetByPosition = {
	top: `${BANNER_HEIGHT_EXTEND}vh`,
	center: `${BANNER_HEIGHT_EXTEND / 2}vh`,
	bottom: "0",
};
const bannerOffset =
	bannerOffsetByPosition[siteConfig.banner.position || "center"];
---

<!DOCTYPE html>
<html lang={siteLang} class="bg-[var(--page-bg)] transition text-[14px] md:text-[16px]"
	  data-overlayscrollbars-initialize
>
	<head>
	<script is:inline>
    // 为所有外部链接添加rel="noreferrer noopener"
    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll('a[target="_blank"]').forEach(link => {
        if (!link.href.startsWith(window.location.origin)) {
          link.rel = (link.rel ? link.rel + ' ' : '') + 'noreferrer noopener';
        }
      });
    });
  </script>

		<title>{pageTitle}</title>

		<meta charset="UTF-8" />
		<meta name="description" content={description || pageTitle}>
		<meta name="author" content={profileConfig.name}>

		<meta property="og:site_name" content={siteConfig.title}>
		<meta property="og:url" content={Astro.url}>
		<meta property="og:title" content={pageTitle}>
		<meta property="og:description" content={description || pageTitle}>
		{setOGTypeArticle ? (
        <meta property="og:type" content="article" />
        ) : (
        <meta property="og:type" content="website" />
        )}

		<meta name="twitter:card" content="summary_large_image">
		<meta property="twitter:url" content={Astro.url}>
		<meta name="twitter:title" content={pageTitle}>
		<meta name="twitter:description" content={description || pageTitle}>

		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<meta name="referrer" content="no-referrer">
		{favicons.map(favicon => (
			<link rel="icon"
				  href={favicon.src.startsWith('/') ? url(favicon.src) : favicon.src}
				  sizes={favicon.sizes}
				  media={favicon.theme && `(prefers-color-scheme: ${favicon.theme})`}
			/>
		))}

		<!-- Set the theme before the page is rendered to avoid a flash -->
		<script is:inline define:vars={{DEFAULT_THEME, LIGHT_MODE, DARK_MODE, AUTO_MODE, BANNER_HEIGHT_EXTEND, PAGE_WIDTH, configHue}}>
			// Load the theme from local storage
			const theme = localStorage.getItem('theme') || DEFAULT_THEME;
			switch (theme) {
				case LIGHT_MODE:
					document.documentElement.classList.remove('dark');
					break
				case DARK_MODE:
					document.documentElement.classList.add('dark');
					break
				case AUTO_MODE:
					if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
						document.documentElement.classList.add('dark');
					} else {
						document.documentElement.classList.remove('dark');
					}
			}

			// Load the hue from local storage
			const hue = localStorage.getItem('hue') || configHue;
			document.documentElement.style.setProperty('--hue', hue);

			// calculate the --banner-height-extend, which needs to be a multiple of 4 to avoid blurry text
			let offset = Math.floor(window.innerHeight * (BANNER_HEIGHT_EXTEND / 100));
			offset = offset - offset % 4;
			document.documentElement.style.setProperty('--banner-height-extend', `${offset}px`);
		</script>
		<style define:vars={{
			configHue,
			'page-width': `${PAGE_WIDTH}rem`,
		}}></style>  <!-- defines global css variables. This will be applied to <html> <body> and some other elements idk why -->


		<slot name="head"></slot>

		<link rel="alternate" type="application/rss+xml" title={profileConfig.name} href={`${Astro.site}rss.xml`}/>



	</head>
	<body class=" min-h-screen transition " class:list={[{"lg:is-home": isHomePage, "enable-banner": enableBanner}]}
		  data-overlayscrollbars-initialize
	>
		<ConfigCarrier></ConfigCarrier>
		<slot />
		
		<!-- Music Player -->
		<MusicPlayer client:load />

		<!-- SakanaWidget Global -->
		<script>
			// 全局加载SakanaWidget
			(async () => {
				try {
					const SakanaWidget = await import('sakana-widget');
					await import('sakana-widget/lib/index.css');
					
					// 注册到全局
					window.SakanaWidget = SakanaWidget.default;
					
						// 自动初始化所有sakana组件
				const initSakanaWidgets = () => {
					const containers = document.querySelectorAll('[data-sakana]');
					containers.forEach(container => {
						if (container.hasAttribute('data-initialized')) return;
						
						// 布局参数
						const align = container.getAttribute('data-align') || 'center';
						const margin = container.getAttribute('data-margin') || '2rem 0';
						const display = container.getAttribute('data-display') || 'flex';
						const width = container.getAttribute('data-width') || 'auto';
						const height = container.getAttribute('data-height') || 'auto';
						
						// 应用布局样式
						container.style.display = display;
						container.style.margin = margin;
						
						// 对齐方式
						switch(align) {
							case 'left':
								container.style.justifyContent = 'flex-start';
								break;
							case 'right':
								container.style.justifyContent = 'flex-end';
								break;
							case 'center':
							default:
								container.style.justifyContent = 'center';
								break;
						}
						
						// 设置尺寸
						if (width !== 'auto') container.style.width = width;
						if (height !== 'auto') container.style.height = height;
						
						// 功能参数
						const size = parseInt(container.getAttribute('data-size') || '200');
						const character = container.getAttribute('data-character') || 'chisato';
						const controls = container.getAttribute('data-controls') !== 'false';
						const draggable = container.getAttribute('data-draggable') !== 'false';
						const autoFit = container.getAttribute('data-auto-fit') === 'true';
						const rod = container.getAttribute('data-rod') !== 'false';
						const customImage = container.getAttribute('data-image');
						
						// 创建内部容器
						const innerContainer = document.createElement('div');
						innerContainer.style.position = 'relative';
						innerContainer.style.width = `${size}px`;
						innerContainer.style.height = `${size}px`;
						
						container.appendChild(innerContainer);
						
						// 创建配置对象
						const config = {
							size,
							controls,
							draggable,
							autoFit,
							rod
						};
						
						// 处理自定义图片的referrer问题
									const processCustomImage = (imageUrl) => {
										// 如果是B站图片，使用图片代理服务
										if (imageUrl.includes('hdslb.com')) {
											// 使用images.weserv.nl代理服务
											return `https://images.weserv.nl/?url=${encodeURIComponent(imageUrl)}&referrerpolicy=no-referrer`;
										}
										return imageUrl;
									};

									// 如果有自定义图片，创建新角色
									if (customImage) {
										const baseCharacter = SakanaWidget.default.getCharacter(character);
										if (baseCharacter) {
											// 处理图片URL
											const processedImage = processCustomImage(customImage);
											
											// 创建图片加载器
											const loadImageWithReferrer = (url) => {
												return new Promise((resolve, reject) => {
													const img = new Image();
													img.crossOrigin = 'anonymous';
													img.referrerPolicy = 'no-referrer';
													
													img.onload = () => {
														// 创建canvas来处理图片
														const canvas = document.createElement('canvas');
														const ctx = canvas.getContext('2d');
														canvas.width = img.width;
														canvas.height = img.height;
														ctx.drawImage(img, 0, 0);
														
														// 转换为data URL
														try {
															const dataUrl = canvas.toDataURL('image/png');
															resolve(dataUrl);
														} catch (e) {
															console.warn('Canvas转换失败，使用原URL:', e);
															resolve(url);
														}
													};
													
													img.onerror = () => {
														console.warn('图片加载失败，尝试使用备用方案');
														// 创建代理URL
														const proxyUrl = `https://images.weserv.nl/?url=${encodeURIComponent(url)}&referrerpolicy=no-referrer`;
														resolve(proxyUrl);
													};
													
													img.src = url;
													});
											};

											// 异步加载图片并创建角色
											loadImageWithReferrer(processedImage).then(imageSrc => {
												const customCharacter = {
													...baseCharacter,
													image: imageSrc
												};
												
												const uniqueName = `custom-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
												SakanaWidget.default.registerCharacter(uniqueName, customCharacter);
												
												// 更新配置
												const finalConfig = { ...config, character: uniqueName };
												
												// 创建并挂载组件
												new SakanaWidget.default(finalConfig).mount(innerContainer);
												
											}).catch(() => {
												// 如果图片加载失败，使用默认角色
												console.warn('自定义图片加载失败，使用默认角色');
												new SakanaWidget.default(config).mount(innerContainer);
											});
											
											// 标记为已初始化
											container.setAttribute('data-initialized', 'true');
											return; // 跳过下面的同步初始化
										}
									} else {
										config.character = character as 'chisato' | 'takina';
									}
						
						new SakanaWidget.default(config).mount(innerContainer);
						
						// 添加自适应调整功能
						const resizeObserver = new ResizeObserver(entries => {
							entries.forEach(entry => {
								const newSize = Math.min(entry.contentRect.width, entry.contentRect.height);
								if (newSize > 0) {
									const widget = container.querySelector('.sakana-widget');
									if (widget) {
										// 通知组件调整大小
										const canvas = widget.querySelector('canvas');
										if (canvas) {
											const event = new CustomEvent('resize-widget', { detail: { size: newSize } });
											canvas.dispatchEvent(event);
										}
									}
								}
							});
						});
						
						resizeObserver.observe(container);
						container.setAttribute('data-initialized', 'true');
					});
				};
					
					// 页面加载完成后初始化
					if (document.readyState === 'loading') {
						document.addEventListener('DOMContentLoaded', initSakanaWidgets);
					} else {
						initSakanaWidgets();
					}
					
					// 监听swup页面切换后重新初始化
					document.addEventListener('swup:contentReplaced', initSakanaWidgets);
					
				} catch (error) {
					console.error('Failed to load SakanaWidget:', error);
				}
			})();
		</script>

		<!-- increase the page height during page transition to prevent the scrolling animation from jumping -->
		<div id="page-height-extend" class="hidden h-[300vh]"></div>

		<!-- Translate.js integration - lazy loading -->
		{siteConfig.translate?.enable && (
			<script>
				// 懒加载translate.js，只有在需要时才加载
				window.loadTranslateScript = function() {
					if (window.translate || document.getElementById('translate-script')) {
						return Promise.resolve();
					}
					
					return new Promise((resolve, reject) => {
						const script = document.createElement('script');
						script.src = '/translate.js';
						script.id = 'translate-script';
						script.async = true;
						script.onload = () => {
							if (typeof window.translate !== 'undefined') {
								resolve();
							} else {
								reject(new Error('translate.js loaded but window.translate not available'));
							}
						};
						script.onerror = reject;
						document.head.appendChild(script);
					});
				};
			</script>
		)}
	</body>
</html>

<style is:global define:vars={{
	bannerOffset,
	'banner-height-home': `${BANNER_HEIGHT_HOME}vh`,
	'banner-height': `${BANNER_HEIGHT}vh`,
}}>
@tailwind components;
@layer components {
	.enable-banner.is-home #banner-wrapper {
		@apply h-[var(--banner-height-home)] translate-y-[var(--banner-height-extend)]
	}
	.enable-banner #banner-wrapper {
		@apply h-[var(--banner-height-home)]
	}

	.enable-banner.is-home #banner {
		@apply h-[var(--banner-height-home)] translate-y-0
	}
	.enable-banner #banner {
		@apply h-[var(--banner-height-home)] translate-y-[var(--bannerOffset)]
	}
	.enable-banner.is-home #main-grid {
		@apply translate-y-[var(--banner-height-extend)];
	}
	.enable-banner #top-row {
		@apply h-[calc(var(--banner-height-home)_-_4.5rem)] transition-all duration-300
	}
	.enable-banner.is-home #sidebar-sticky {
		@apply top-[calc(1rem_-_var(--banner-height-extend))]
	}
	.navbar-hidden {
		@apply opacity-0 -translate-y-16
	}
	
	/* Water waves animation */
	.waves > .parallax use {
		animation: wave 25s cubic-bezier(0.5, 0.5, 0.45, 0.5) infinite;
	}

	@keyframes wave {
		0% {
			transform: translate3d(-90px, 0, 0);
		}
		100% {
			transform: translate3d(85px, 0, 0);
		}
	}
}
</style>

<script>
import 'overlayscrollbars/overlayscrollbars.css';
import {
	OverlayScrollbars,
	// ScrollbarsHidingPlugin,
	// SizeObserverPlugin,
	// ClickScrollPlugin
} from 'overlayscrollbars';
import {getHue, getStoredTheme, setHue, setTheme} from "../utils/setting-utils";
import {pathsEqual, url} from "../utils/url-utils";
import {
	BANNER_HEIGHT,
	BANNER_HEIGHT_HOME,
	BANNER_HEIGHT_EXTEND,
	MAIN_PANEL_OVERLAPS_BANNER_HEIGHT
} from "../constants/constants";
import { siteConfig } from '../config';

/* Preload fonts */
// (async function() {
// 	try {
// 		await Promise.all([
// 			document.fonts.load("400 1em Roboto"),
// 			document.fonts.load("700 1em Roboto"),
// 		]);
// 		document.body.classList.remove("hidden");
// 	} catch (error) {
// 		console.log("Failed to load fonts:", error);
// 	}
// })();

/* TODO This is a temporary solution for style flicker issue when the transition is activated */
/* issue link: https://github.com/withastro/astro/issues/8711, the solution get from here too */
/* update: fixed in Astro 3.2.4 */
/*
function disableAnimation() {
	const css = document.createElement('style')
	css.appendChild(
		document.createTextNode(
			`*{
              -webkit-transition:none!important;
              -moz-transition:none!important;
              -o-transition:none!important;
              -ms-transition:none!important;
              transition:none!important
              }`
		)
	)
	document.head.appendChild(css)

	return () => {
		// Force restyle
		;(() => window.getComputedStyle(document.body))()

		// Wait for next tick before removing
		setTimeout(() => {
			document.head.removeChild(css)
		}, 1)
	}
}
*/

const bannerEnabled = !!document.getElementById('banner-wrapper')

function setClickOutsideToClose(panel: string, ignores: string[]) {
	document.addEventListener("click", event => {
		let panelDom = document.getElementById(panel);
		let tDom = event.target;
		if (!(tDom instanceof Node)) return;		// Ensure the event target is an HTML Node
		for (let ig of ignores) {
			let ie = document.getElementById(ig)
			if (ie == tDom || (ie?.contains(tDom))) {
				return;
			}
		}
		panelDom!.classList.add("float-panel-closed");
	});
}
setClickOutsideToClose("display-setting", ["display-setting", "display-settings-switch"])
setClickOutsideToClose("nav-menu-panel", ["nav-menu-panel", "nav-menu-switch"])
setClickOutsideToClose("search-panel", ["search-panel", "search-bar", "search-switch"])


function loadTheme() {
	const theme = getStoredTheme()
	setTheme(theme)
}

function loadHue() {
	setHue(getHue())
}

function initCustomScrollbar() {
	// 延迟初始化滚动条以提升性能
	requestIdleCallback(() => {
		const bodyElement = document.querySelector('body');
		if (!bodyElement) return;
		
		// 简化配置以提升性能
		OverlayScrollbars(
			{
				target: bodyElement,
				cancel: {
					nativeScrollbarsOverlaid: true,
				}
			}, {
			scrollbars: {
				theme: 'scrollbar-base scrollbar-auto py-1',
				autoHide: 'move',
				autoHideDelay: 800,
				autoHideSuspend: false,
			},
		});

		// 懒加载katex滚动条
		const katexElements = document.querySelectorAll('.katex-display') as NodeListOf<HTMLElement>;
		if (katexElements.length === 0) return;

		const katexObserver = new IntersectionObserver((entries, observer) => {
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					const element = entry.target as HTMLElement;
					if (!element.parentNode || element.hasAttribute('data-scrollbar-initialized')) return;

					const container = document.createElement('div');
					container.className = 'katex-display-container';
					element.parentNode.insertBefore(container, element);
					container.appendChild(element);

					OverlayScrollbars(container, {
						scrollbars: {
							theme: 'scrollbar-base scrollbar-auto',
							autoHide: 'leave',
							autoHideDelay: 800,
						}
					});

					element.setAttribute('data-scrollbar-initialized', 'true');
					observer.unobserve(entry.target);
				}
			});
		}, {
			root: null,
			rootMargin: '200px',
			threshold: 0.1
		});

		katexElements.forEach(element => {
			katexObserver.observe(element);
		});
	});
}

function showBanner() {
	if (!siteConfig.banner.enable) return;

	// 使用requestAnimationFrame优化DOM操作
	requestAnimationFrame(() => {
		// Handle single image banner (desktop)
		const banner = document.getElementById('banner');
		if (banner) {
			banner.classList.remove('opacity-0', 'scale-105');
		}

		// Handle mobile single image banner - 使用与电脑端相同的逻辑
		const mobileBanner = document.querySelector('.block.lg\\:hidden[alt="Mobile banner image of the blog"]');
		if (mobileBanner && !document.getElementById('banner-carousel')) {
			// 移动端使用与电脑端相同的初始化逻辑
			mobileBanner.classList.remove('opacity-0', 'scale-105');
			mobileBanner.classList.add('opacity-100');
		}

		// Handle carousel banner - 立即初始化，移除延迟
		const carousel = document.getElementById('banner-carousel');
		if (carousel) {
			// 立即初始化轮播，移除延迟以改善流畅性
			initCarousel();
		}
	});
}

function initCarousel() {
	const carouselItems = document.querySelectorAll('.carousel-item');
	
	// 根据屏幕尺寸过滤有效的轮播项
	const isMobile = window.innerWidth < 1024; // lg breakpoint
	const validItems = Array.from(carouselItems).filter(item => {
		if (isMobile) {
			// 移动端：只显示有mobile图片的项目
			return item.querySelector('.block.lg\\:hidden');
		} else {
			// 桌面端：只显示有desktop图片的项目
			return item.querySelector('.hidden.lg\\:block');
		}
	});
	
	// Check if carousel is disabled but we have multiple images - show random image
	if (validItems.length > 1 && !siteConfig.banner.carousel?.enable) {
		// Hide all images first
		carouselItems.forEach((item, index) => {
			item.classList.add('opacity-0', 'scale-110');
			item.classList.remove('opacity-100', 'scale-100');
		});
		
		// Show random valid image
		const randomIndex = Math.floor(Math.random() * validItems.length);
		const randomItem = validItems[randomIndex];
		
		randomItem.classList.add('opacity-100', 'scale-100');
		randomItem.classList.remove('opacity-0', 'scale-110');
		return;
	}
	
	if (validItems.length > 1 && siteConfig.banner.carousel?.enable) {
		let currentIndex = 0;
		const interval = siteConfig.banner.carousel?.interval || 6;
		let carouselInterval;
		let isPaused = false;

		// 移动端触摸手势支持
		let startX = 0;
		let startY = 0;
		let isSwiping = false;
		const carousel = document.getElementById('banner-carousel');

		// 切换图片的函数 - 基于有效项目
		function switchToSlide(index) {
			// 隐藏当前图片
			const currentItem = validItems[currentIndex];
			currentItem.classList.remove('opacity-100', 'scale-100');
			currentItem.classList.add('opacity-0', 'scale-110');

			// 更新索引
			currentIndex = index;
			
			// 显示新图片
			const nextItem = validItems[currentIndex];
			nextItem.classList.add('opacity-100', 'scale-100');
			nextItem.classList.remove('opacity-0', 'scale-110');
		}

		// 初始化：隐藏所有图片，只显示第一张有效图片
		carouselItems.forEach((item) => {
			item.classList.add('opacity-0', 'scale-110');
			item.classList.remove('opacity-100', 'scale-100');
		});
		
		// 显示第一张有效图片
		if (validItems.length > 0) {
			validItems[0].classList.add('opacity-100', 'scale-100');
			validItems[0].classList.remove('opacity-0', 'scale-110');
		}

		// 移动端触摸事件
		if (carousel && 'ontouchstart' in window) {
			carousel.addEventListener('touchstart', (e) => {
				startX = e.touches[0].clientX;
				startY = e.touches[0].clientY;
				isSwiping = false;
				isPaused = true;
				clearInterval(carouselInterval);
			}, { passive: true });

			carousel.addEventListener('touchmove', (e) => {
				if (!startX || !startY) return;
				
				const diffX = Math.abs(e.touches[0].clientX - startX);
				const diffY = Math.abs(e.touches[0].clientY - startY);
				
				// 判断是否为水平滑动
				if (diffX > diffY && diffX > 30) {
					isSwiping = true;
					e.preventDefault();
				}
			}, { passive: false });

			carousel.addEventListener('touchend', (e) => {
				if (!startX || !startY || !isSwiping) {
					isPaused = false;
					startCarousel();
					return;
				}
				
				const endX = e.changedTouches[0].clientX;
				const diffX = startX - endX;
				
				// 滑动距离超过50px才切换
				if (Math.abs(diffX) > 50) {
					if (diffX > 0) {
					// 向左滑动，显示下一张
					const nextIndex = (currentIndex + 1) % validItems.length;
					switchToSlide(nextIndex);
				} else {
					// 向右滑动，显示上一张
					const prevIndex = (currentIndex - 1 + validItems.length) % validItems.length;
					switchToSlide(prevIndex);
				}
				}
				
				startX = 0;
				startY = 0;
				isSwiping = false;
				isPaused = false;
				
				// 重新开始自动轮播
				startCarousel();
			}, { passive: true });
		}

		// 开始轮播的函数
		function startCarousel() {
			clearInterval(carouselInterval);
			carouselInterval = setInterval(() => {
				if (!isPaused) {
					const nextIndex = (currentIndex + 1) % validItems.length;
					switchToSlide(nextIndex);
				}
			}, interval * 1000);
		}

		// 鼠标悬停暂停（桌面端）
		if (carousel) {
			carousel.addEventListener('mouseenter', () => {
				isPaused = true;
				clearInterval(carouselInterval);
			});

			carousel.addEventListener('mouseleave', () => {
				isPaused = false;
				startCarousel();
			});
		}

		// 开始自动轮播
		startCarousel();
	}
}

function initTranslate() {
	if (!siteConfig.translate?.enable || typeof window.translate === 'undefined') return;
	
	// 配置translate.js
	if (siteConfig.translate.service && window.translate) {
		window.translate.service.use(siteConfig.translate.service);
	}
	
	if (siteConfig.translate.defaultLanguage && window.translate) {
		window.translate.language.setLocal(siteConfig.translate.defaultLanguage);
	}
	
	if (siteConfig.translate.autoDiscriminate && window.translate) {
		window.translate.setAutoDiscriminateLocalLanguage();
	}
	
	// 设置忽略的类名和标签
	if (siteConfig.translate.ignoreClasses && window.translate) {
		siteConfig.translate.ignoreClasses.forEach(className => {
			window.translate.ignore.class.push(className);
		});
	}
	
	if (siteConfig.translate.ignoreTags && window.translate) {
		siteConfig.translate.ignoreTags.forEach(tagName => {
			window.translate.ignore.tag.push(tagName);
		});
	}
	
	// 不显示默认的select选择框
	if (siteConfig.translate.showSelectTag === false && window.translate) {
		window.translate.selectLanguageTag.show = false;
	}
	
	// 禁用自动保存翻译状态到localStorage
	if (window.translate) {
		window.translate.storage.set = function() {
			// 空函数，阻止保存状态
		};
	
		// 启动翻译监听
		window.translate.listener.start();
	
		// 执行翻译初始化
		window.translate.execute();
	}
}

// 懒加载并初始化翻译功能
async function loadAndInitTranslate() {
	if (!siteConfig.translate?.enable) return;
	
	try {
		await window.loadTranslateScript();
		initTranslate();
	} catch (error) {
		console.error('Failed to load translate.js:', error);
	}
}

function init() {
	// disableAnimation()()		// TODO
	loadTheme();
	loadHue();
	initCustomScrollbar();
	showBanner();
	
	// 翻译功能改为懒加载，不在页面初始化时加载
}

/* Load settings when entering the site */
init();

const setup = () => {
	// TODO: temp solution to change the height of the banner
/*
	window.swup.hooks.on('animation:out:start', () => {
		const path = window.location.pathname
		const body = document.querySelector('body')
		if (path[path.length - 1] === '/' && !body.classList.contains('is-home')) {
			body.classList.add('is-home')
		} else if (path[path.length - 1] !== '/' && body.classList.contains('is-home')) {
			body.classList.remove('is-home')
		}
	})
*/
	window.swup.hooks.on('link:click', () => {
		// Remove the delay for the first time page load
		document.documentElement.style.setProperty('--content-delay', '0ms')

		// 简化navbar处理逻辑
		if (bannerEnabled) {
			const navbar = document.getElementById('navbar-wrapper')
			if (navbar && document.body.classList.contains('lg:is-home')) {
				const threshold = window.innerHeight * (BANNER_HEIGHT / 100) - 88
				if (document.documentElement.scrollTop >= threshold) {
					navbar.classList.add('navbar-hidden')
				}
			}
		}
	})
	window.swup.hooks.on('content:replace', () => {
		initCustomScrollbar();
		
		// 重新初始化 TOC 组件
		const tocElement = document.querySelector('table-of-contents');
		if (tocElement && typeof tocElement.init === 'function') {
			setTimeout(() => {
				tocElement.init();
			}, 100);
		}
		
		// 重新初始化移动端 TOC 组件
		if (typeof window.mobileTOCInit === 'function') {
			setTimeout(() => {
				window.mobileTOCInit();
			}, 100);
		}
		
		// 页面内容替换后重新执行翻译（仅在翻译已加载时）
		setTimeout(() => {
			if (siteConfig.translate?.enable && typeof window.translate !== 'undefined') {
				window.translate.execute();
			}
		}, 100);
	})
	window.swup.hooks.on('visit:start', (visit: {to: {url: string}}) => {
		// change banner height immediately when a link is clicked
		const bodyElement = document.querySelector('body')
		const isHomePage = pathsEqual(visit.to.url, url('/'))
		
		if (isHomePage) {
			bodyElement!.classList.add('lg:is-home');
		} else {
			bodyElement!.classList.remove('lg:is-home');
		}

		// Control banner text visibility based on page
		const bannerTextOverlay = document.querySelector('.banner-text-overlay')
		if (bannerTextOverlay) {
			if (isHomePage) {
				bannerTextOverlay.classList.remove('hidden')
			} else {
				bannerTextOverlay.classList.add('hidden')
			}
		}

		// Control mobile banner visibility based on page with improved staging animation
		const bannerWrapper = document.getElementById('banner-wrapper')
		const mainContentWrapper = document.querySelector('.absolute.w-full.z-30')
		
		if (bannerWrapper && mainContentWrapper) {
			if (isHomePage) {
				// 首页：延迟移除隐藏类，让banner和内容优雅地出现
				setTimeout(() => {
					bannerWrapper.classList.remove('mobile-hide-banner')
				}, 100)
				setTimeout(() => {
					mainContentWrapper.classList.remove('mobile-main-no-banner')
				}, 150)
			} else {
				// 非首页：分阶段隐藏，先隐藏banner，再移动内容
				bannerWrapper.classList.add('mobile-hide-banner')
				// 延迟移动内容，让banner先完全消失
				setTimeout(() => {
					mainContentWrapper.classList.add('mobile-main-no-banner')
				}, 100)
			}
		}

		// increase the page height during page transition to prevent the scrolling animation from jumping
		const heightExtend = document.getElementById('page-height-extend')
		if (heightExtend) {
			heightExtend.classList.remove('hidden')
		}

		// Hide the TOC while scrolling back to top
		let toc = document.getElementById('toc-wrapper');
		if (toc) {
			toc.classList.add('toc-not-ready')
		}
	});
	window.swup.hooks.on('page:view', () => {
		// hide the temp high element when the transition is done
		const heightExtend = document.getElementById('page-height-extend')
		if (heightExtend) {
			heightExtend.classList.remove('hidden')
		}
		
		// 确保页面滚动到顶部，特别是移动端banner关闭时
		window.scrollTo({
			top: 0,
			behavior: 'instant'
		});
		
		// 检查当前页面是否为文章页面，如果是则触发自定义事件用于初始化评论系统
		setTimeout(() => {
			if (document.getElementById('tcomment')) {
				// 触发自定义事件，通知评论系统页面已完全加载
				const pageLoadedEvent = new CustomEvent('mizuki:page:loaded', {
					detail: {
						path: window.location.pathname,
						timestamp: Date.now()
					}
				});
				document.dispatchEvent(pageLoadedEvent);
				console.log('Layout: 触发 mizuki:page:loaded 事件，路径:', window.location.pathname);
			}
		}, 300);
	});
	window.swup.hooks.on('visit:end', (_visit: {to: {url: string}}) => {
		setTimeout(() => {
			const heightExtend = document.getElementById('page-height-extend')
			if (heightExtend) {
				heightExtend.classList.add('hidden')
			}

            // Just make the transition looks better
            const toc = document.getElementById('toc-wrapper');
            if (toc) {
                toc.classList.remove('toc-not-ready')
            }
        }, 200)
	});
}
if (window?.swup?.hooks) {
	setup()
} else {
	document.addEventListener('swup:enable', setup)
}

let backToTopBtn = document.getElementById('back-to-top-btn');
let toc = document.getElementById('toc-wrapper');
let navbar = document.getElementById('navbar-wrapper')

// 节流函数
function throttle(func: Function, limit: number) {
	let inThrottle: boolean;
	return function(this: any) {
		const args = arguments;
		const context = this;
		if (!inThrottle) {
			func.apply(context, args);
			inThrottle = true;
			setTimeout(() => inThrottle = false, limit);
		}
	}
}

function scrollFunction() {
	const scrollTop = document.documentElement.scrollTop;
	const bannerHeight = window.innerHeight * (BANNER_HEIGHT / 100);

	// 批量处理DOM操作
	requestAnimationFrame(() => {
		if (backToTopBtn) {
			if (scrollTop > bannerHeight) {
				backToTopBtn.classList.remove('hide')
			} else {
				backToTopBtn.classList.add('hide')
			}
		}

		if (bannerEnabled && toc) {
			if (scrollTop > bannerHeight) {
				toc.classList.remove('toc-hide')
			} else {
				toc.classList.add('toc-hide')
			}
		}

		if (bannerEnabled && navbar) {
			const isHome = document.body.classList.contains('lg:is-home') && window.innerWidth >= 1024;
			const currentBannerHeight = isHome ? BANNER_HEIGHT_HOME : BANNER_HEIGHT;
			const threshold = window.innerHeight * (currentBannerHeight / 100) - 88;
			
			if (scrollTop >= threshold) {
				navbar.classList.add('navbar-hidden')
			} else {
				navbar.classList.remove('navbar-hidden')
			}
		}
	});
}

// 使用节流优化滚动性能
window.onscroll = throttle(scrollFunction, 16); // 约60fps

window.onresize = () => {
	// calculate the --banner-height-extend, which needs to be a multiple of 4 to avoid blurry text
	let offset = Math.floor(window.innerHeight * (BANNER_HEIGHT_EXTEND / 100));
	offset = offset - offset % 4;
	document.documentElement.style.setProperty('--banner-height-extend', `${offset}px`);
}

</script>

<script>
import PhotoSwipeLightbox from "photoswipe/lightbox"
import "photoswipe/style.css"

let lightbox: PhotoSwipeLightbox
let pswp = import("photoswipe")

function createPhotoSwipe() {
	lightbox = new PhotoSwipeLightbox({
		gallery: ".custom-md img, #post-cover img, .moment-images img",
		pswpModule: () => pswp,
		closeSVG: '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 11-28t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z"/></svg>',
		zoomSVG: '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M340-540h-40q-17 0-28.5-11.5T260-580q0-17 11.5-28.5T300-620h40v-40q0-17 11.5-28.5T380-700q17 0 28.5 11.5T420-660v40h40q17 0 28.5 11.5T500-580q0 17-11.5 28.5T460-540h-40v40q0 17-11.5 28.5T380-460q-17 0-28.5-11.5T340-500v-40Zm40 220q-109 0-184.5-75.5T120-580q0-109 75.5-184.5T380-840q109 0 184.5 75.5T640-580q0 44-14 83t-38 69l224 224q11 11 11 28t-11 28q-11 11-28 11t-28-11L532-372q-30 24-69 38t-83 14Zm0-80q75 0 127.5-52.5T560-580q0-75-52.5-127.5T380-760q-75 0-127.5 52.5T200-580q0 75 52.5 127.5T380-400Z"/></svg>',
		padding: { top: 20, bottom: 20, left: 20, right: 20 },
		wheelToZoom: true,
		arrowPrev: false,
		arrowNext: false,
		imageClickAction: 'close',
		tapAction: 'close',
		doubleTapAction: 'zoom',
	})

	// Add filter after lightbox is initialized
	lightbox.addFilter("domItemData", (itemData, element) => {
		if (element instanceof HTMLImageElement) {
			itemData.src = element.src

			itemData.w = Number(element.naturalWidth || window.innerWidth)
			itemData.h = Number(element.naturalHeight || window.innerHeight)

			itemData.msrc = element.src
		}

		return itemData
	})

	(lightbox as any).init()
}

const setup = () => {
	if (!lightbox) {
		createPhotoSwipe()
	}
	window.swup.hooks.on("page:view", () => {
		createPhotoSwipe()
	})

	window.swup.hooks.on(
		"content:replace",
		() => {
			lightbox?.destroy?.()
		},
		{ before: true },
	)
}

if (window.swup) {
	setup()
} else {
	document.addEventListener("swup:enable", setup)
}
</script>
